#!/bin/bash

# Set IP name
IPname=$(echo $PWD | sed -e 's/^.*\/modules\/\(.*\)\/.*/\1/')


echo "#########################################"
echo "## Run simulation flow for $IPname"
echo "#########################################"

# Check if ${PROJECT_DIR} is empty
if [[ -z ${PROJECT_DIR} ]]; then
	echo "ERROR: You need to source setup_ENV at the root of the project folder"
	exit 1;
fi

fromSynth=0
if [ $2 != "--synthesis" ] && [ -n $2 ]; then
	echo "ERROR: Invalid flag $2"
	echo "./questa.simulation_script <top_module> (--synthesis)"
	exit 1
fi

if [ ! -z $2 ]; then
	fromSynth=1
fi

# Check number of parameters
if [ $# -lt 1 ]; then
	echo "ERROR: Illegal number of parameters"
	echo "./questa.simulation_script <top_module> (--synthesis)"
	exit 1
fi

top_module=$1

# Check if you are in the right folder
if [[ $PWD != "${PROJECT_DIR}/modules/${IPname}/simulations" ]]; then
	echo "ERROR: You need to be in the simulation directory of your module (simulations/)"
	exit 1
fi

# Configure environment variables
export MODULE_MAIN_FOLDER="../"
export MODULE_CONFIG_FOLDER="${PROJECT_DIR}config/"
export MODULE_LIBS_FOLDER="${MODULE_MAIN_FOLDER}libs/"
export MODULE_RTL_FOLDER="${MODULE_MAIN_FOLDER}rtl/"
export MODULE_ASIC_FOLDER="${MODULE_MAIN_FOLDER}/asic/"
export MODULE_BENCH_FOLDER="${MODULE_MAIN_FOLDER}testbench/"

# Creates lib folders
rm -r ${MODULE_LIBS_FOLDER}

if [[ ! -d ${MODULE_LIBS_FOLDER} ]]; then
	mkdir -p "${MODULE_LIBS_FOLDER}lib_RTL"
	mkdir -p "${MODULE_LIBS_FOLDER}lib_BENCH"
	mkdir -p "${MODULE_LIBS_FOLDER}lib_SYNTH"
fi

# Creating libraries
vlib ${MODULE_LIBS_FOLDER}lib_RTL/lib_${IPname}
vlib ${MODULE_LIBS_FOLDER}lib_BENCH/lib_${IPname}_TB
vlib ${MODULE_LIBS_FOLDER}lib_SYNTH/lib_${IPname}_SYNTH

# Mapping libraries
vmap lib_${IPname} ${MODULE_LIBS_FOLDER}lib_RTL/lib_${IPname}
vmap lib_${IPname}_TB ${MODULE_LIBS_FOLDER}lib_BENCH/lib_${IPname}_TB
vmap lib_${IPname}_SYNTH ${MODULE_LIBS_FOLDER}lib_SYNTH/lib_${IPname}_SYNTH

# Get the latest version of synthesis
iter=0
while [ -d ${MODULE_ASIC_FOLDER}/synth/synthesis_${iter} ]; do
	iter=$((iter+1))
done
synthDir="synthesis_$((iter-1))"

# Compile and simulate design
if [ $fromSynth -eq 1 ]; then
	vlog +acc -work lib_${IPname}_SYNTH ${MODULE_ASIC_FOLDER}synth/${synthDir}/synthesis_RTL/*.v
	vlog +acc -sv -work lib_${IPname}_TB ${MODULE_BENCH_FOLDER}src/*.sv -L lib_${IPname}_SYNTH
	
	# Run simulation
	vsim -debugDB -lib lib_${IPname}_TB -L lib_${IPname}_SYNTH -L ${AMS_DIR}/verilog/c35b4/lib_Questa107c/c35_CORELIB $top_module
else
	if [ `ls -1 ${MODULE_RTL_FOLDER}src/*.sv 2>/dev/null | wc -l ` -gt 0 ]; then
		vlog +acc -sv -work lib_${IPname} ${MODULE_RTL_FOLDER}src/*.sv
	fi

	if [ `ls -1 ${MODULE_RTL_FOLDER}src/*.v 2>/dev/null | wc -l ` -gt 0 ]; then
		vlog +acc -work lib_${IPname} ${MODULE_RTL_FOLDER}src/*.v
	fi
	
	if [ `ls -1 ${MODULE_RTL_FOLDER}src/*.vhd 2>/dev/null | wc -l ` -gt 0 ]; then
		vcom +acc -work lib_${IPname} ${MODULE_RTL_FOLDER}src/*.vhd
	fi

	vlog +acc -sv -work lib_${IPname}_TB ${MODULE_BENCH_FOLDER}src/*.sv -L lib_${IPname}
	
	# Run simulation
	vsim -debugDB -lib lib_${IPname}_TB -L lib_${IPname} $top_module
fi
