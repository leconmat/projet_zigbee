#!/bin/bash
####################################
## File: run_simulation
## Author: Romain Plumaugat
## Description: This file allows to run the simulation, not editable
####################################

# Set IP name
IPname=$(echo $PWD | sed -e 's/^.*\/modules\/\(.*\)\/.*/\1/')


echo "#########################################"
echo "## Run simulation flow for $IPname"
echo "#########################################"

# Check if ${PROJECT_DIR} is empty, then source setup_ENV
if [[ -z ${PROJECT_DIR} ]]; then
	echo "ERROR: You need to source setup_ENV at the root of the project folder"
	exit 1;
fi

# Check number of parameters
if [ $# -lt 1 ] || [ $# -gt 3 ]; then
	echo "ERROR: Illegal number of parameters"
	echo "./run_simulation <top_module> (--synthesis) (--synthVersion=<>)"
	exit 1
fi

# Check flags
fromSynth=0
if [[ ! -z $2 ]]; then
	if [[ $2 == "--synthesis" ]]; then
		fromSynth=1
		if [[ $(echo $3 | cut -f 1 -d "=") == "--synthVersion" ]]; then
			synthVersion=$(echo $3 | cut -f 2 -d "=")
		elif [[ -n $3 ]]; then
			echo "ERROR: Invalid argument $3"; exit 1
		fi
	elif [[ $(echo $2 | cut -f 1 -d "=") == "--synthVersion" ]]; then
		if [| -n $3 ]] && [[ $3 != "--synthesis" ]]; then
			echo "ERROR: Invalid argument $3"; exit 1
		else
			fromSynth=1
			synthVersion=$(echo $2 | cut -f 2 -d "=")
		fi
	else
		echo "ERROR: Invalid argument $2"; exit 1
	fi
fi

top_module=$1

# Check if you are in the right folder
if [[ $PWD != "${PROJECT_DIR}/modules/${IPname}/simulations" ]]; then
	echo "ERROR: You need to be in the simulation directory of your module (simulations/)"
	exit 1
fi

# Configuration of environment variables
export MODULE_MAIN_FOLDER="${PROJECT_DIR}/modules/${IPname}/"
export MODULE_CONFIG_FOLDER="${PROJECT_DIR}config/"
export MODULE_LIBS_FOLDER="${MODULE_MAIN_FOLDER}libs/"
export MODULE_RTL_FOLDER="${MODULE_MAIN_FOLDER}rtl/"
export MODULE_ASIC_FOLDER="${MODULE_MAIN_FOLDER}asic/"
export MODULE_BENCH_FOLDER="${MODULE_MAIN_FOLDER}testbench/"

# Creating lib folders
if [[ -d ${MODULE_LIBS_FOLDER} ]]; then
	rm -r ${MODULE_LIBS_FOLDER}
fi

if [[ ! -d ${MODULE_LIBS_FOLDER} ]]; then
	mkdir -p "${MODULE_LIBS_FOLDER}lib_RTL"
	mkdir -p "${MODULE_LIBS_FOLDER}lib_BENCH"
	mkdir -p "${MODULE_LIBS_FOLDER}lib_SYNTH"
fi

# Creating libraries
vlib ${MODULE_LIBS_FOLDER}lib_RTL/lib_${IPname}_RTL
vlib ${MODULE_LIBS_FOLDER}lib_BENCH/lib_${IPname}_TB
vlib ${MODULE_LIBS_FOLDER}lib_SYNTH/lib_${IPname}_SYNTH

# Mapping libraries
vmap lib_${IPname} ${MODULE_LIBS_FOLDER}lib_RTL/lib_${IPname}_RTL
vmap lib_${IPname}_TB ${MODULE_LIBS_FOLDER}lib_BENCH/lib_${IPname}_TB
vmap lib_${IPname}_SYNTH ${MODULE_LIBS_FOLDER}lib_SYNTH/lib_${IPname}_SYNTH

# Check if there is a synthesis folder if --synthesis
shopt -s nullglob
set -- ${MODULE_ASIC_FOLDER}/synth/synthesis_*
if [ $# -eq 0 ] && [ ${fromSynth} -eq 1 ]; then
	echo "ERROR: You want to run a simulation on the RTL synthesis, but there is none"
fi

# Getting the latest version of synthesis if no synthesis version was specified
if [ ${fromSynth} -eq 1 ]; then
	if [ -z $synthVersion ]; then
		iter=0
		while [ -d ${MODULE_ASIC_FOLDER}/synth/synthesis_${iter} ]; do
			iter=$((iter+1))
		done
		if [[ $iter -ne 0 ]]; then
			synthVersion=$((iter-1))
		else
			synthVersion=0
		fi
	fi
	
	synthDir="${MODULE_ASIC_FOLDER}synth/synthesis_${synthVersion}"

	if [ -d $synthDir ]; then
		echo "Using synthesis netlist version ${synthVersion} for simulation"
	else
		echo "ERROR: $synthDir: No such file or directory"; exit 1
	fi
else
	echo "Using RTL source files for simulation"
fi

# Compiles and simulates design
if [ $fromSynth -eq 1 ]; then
	vlog +acc -work lib_${IPname}_SYNTH ${synthDir}/synthesis_RTL/*.v
	vlog +acc -sv -work lib_${IPname}_TB ${MODULE_BENCH_FOLDER}src/*.sv -L lib_${IPname}_SYNTH
	
	# Run simulation
	vsim -debugDB -lib lib_${IPname}_TB -L lib_${IPname}_SYNTH -L ${AMS_DIR}/verilog/c35b4/lib_Questa107c/c35_CORELIB $top_module
else
	if [ `ls -1 ${MODULE_RTL_FOLDER}src/*.sv 2>/dev/null | wc -l` -gt 0 ]; then
		echo "Compile SystemVerilog files"
		vlog +acc -sv -work lib_${IPname} ${MODULE_RTL_FOLDER}src/*.sv
	elif [ `ls -1 ${MODULE_RTL_FOLDER}src/*.v 2>/dev/null | wc -l` -gt 0 ]; then
		echo "Compile Verilog files"
		vlog +acc -work lib_${IPname} ${MODULE_RTL_FOLDER}src/*.v
	elif [ `ls -1 ${MODULE_RTL_FOLDER}src/*.vhd 2>/dev/null | wc -l` -gt 0 ]; then
		echo "Compile VHDL files"
		vcom +acc -work lib_${IPname} ${MODULE_RTL_FOLDER}src/*.vhd
	fi

	vlog +acc -sv -work lib_${IPname}_TB ${MODULE_BENCH_FOLDER}src/*.sv -L lib_${IPname}
	
	# Run simulation
	vsim -debugDB -lib lib_${IPname}_TB -L lib_${IPname} $top_module
fi
